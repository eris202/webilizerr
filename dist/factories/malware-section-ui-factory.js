"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const typedi_1 = require("typedi");
let MalwareSectionUiFactory = class MalwareSectionUiFactory {
    constructor() {
        this.decorateMalwareSection = (json) => {
            this.googleMalwareSection(json);
            this.mCaffeeMalwareSection(json);
            this.nortonMalwareSection(json);
            this.avgMalwareSection(json);
            this.malwareUiSection(json);
        };
    }
    googleMalwareSection(json) {
        if (json.malware.data.google == "safe") {
            json.malware.googleVerified = "mdi-check";
            json.malware.googleColor = "success";
        }
        else {
            json.malware.googleVerified = "mdi-close";
            json.malware.googleColor = "danger";
        }
    }
    mCaffeeMalwareSection(json) {
        if (json.malware.data.mcafee == "safe") {
            json.malware.mcafeeVerified = "mdi-check";
            json.malware.mcafeeColor = "success";
        }
        else if (json.malware.data.mcafee == "unverified") {
            json.malware.mcafeeVerified = "mdi-close";
            json.malware.mcafeeColor = "danger";
        }
    }
    nortonMalwareSection(json) {
        if (json.malware.data.norton == "safe") {
            json.malware.nortonVerified = "mdi-check";
            json.malware.nortonColor = "success";
        }
        else if (json.malware.data.norton == "unverified") {
            json.malware.nortonVerified = "mdi-close";
            json.malware.nortonColor = "danger";
        }
    }
    avgMalwareSection(json) {
        if (json.malware.data.avg == "safe") {
            json.malware.avgVerified = "mdi-check";
            json.malware.avgColor = "success";
        }
        else if (json.malware.data.avg == "unverified") {
            json.malware.avgVerified = "mdi-close";
            json.malware.avgColor = "danger";
        }
    }
    malwareUiSection(json) {
        if (json.malware.data.avg == "unverified" ||
            json.malware.data.norton == "unverified" ||
            json.malware.data.mcafee == "unverified" ||
            json.malware.data.google == "unverified") {
            json.malware.color = "panel-danger";
            json.malware.warning = "Warning";
            json.malware.shortAnswer =
                "Your website has NOT been flagged as safe by popular malware scanners.";
        }
        else {
            json.malware.color = "panel-success";
            json.malware.warning = "Good";
            json.malware.shortAnswer =
                "Your website has been flagged as safe by popular malware scanners";
        }
    }
};
MalwareSectionUiFactory = __decorate([
    typedi_1.Service()
], MalwareSectionUiFactory);
exports.MalwareSectionUiFactory = MalwareSectionUiFactory;
//# sourceMappingURL=malware-section-ui-factory.js.map